{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","totalCounters","totalItems","className","Counter","this","getBadgeClasses","formatCount","props","counter","counter_name","onClick","onIncrement","onDecrement","onDelete","id","classes","value","Component","Counters","onReset","counters","onAdd","onDeleteAll","map","key","App","state","counter_id","sum","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","handleAdd","counterAdd","push","window","prompt","handleDecrement","handleDeleteAll","counterDeleteAll","Fragment","length","reduce","currentTotal","item","onSum","sumAllItems","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4992bde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Navbar = ({ totalCounters, totalItems }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <span className=\"navbar-brand h1\">\r\n        Items\r\n        <span className=\"badge badge-pill badge-secondary m-2\">\r\n          {totalCounters}\r\n        </span>\r\n      </span>\r\n      <span className=\"navbar-brand h1\">\r\n        Total Items\r\n        <span className=\"badge badge-pill badge-secondary m-2\">\r\n          {totalItems}\r\n        </span>\r\n      </span>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <span className={\"btn btn-primary btn-sm m-2\"}>\r\n          {this.props.counter.counter_name}\r\n        </span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Decrement\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  render() {\r\n    const {\r\n      onReset,\r\n      counters,\r\n      onDelete,\r\n      onIncrement,\r\n      onAdd,\r\n      onDecrement,\r\n      onDeleteAll\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m2\">\r\n          Reset\r\n        </button>\r\n        <button onClick={onAdd} className=\"btn btn-warning btn-sm m-2\">\r\n          Add\r\n        </button>\r\n        <button onClick={onDeleteAll} className=\"btn btn-danger btn-sm m-2\">\r\n          Delete All\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          ></Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\nclass App extends Component {\n  state = {\n    counter_id: 0,\n    counters: [],\n    sum: 0,\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n  handleAdd = (counterAdd) => {\n    const counter_id = this.state.counter_id + 1;\n    const counters = this.state.counters.push({\n      id: this.state.counter_id + 1,\n      value: 1,\n      counter_name: window.prompt(\"welches Item? \"),\n    });\n    this.setState({ counter_id });\n  };\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n    this.setState({ counters });\n  };\n  handleDeleteAll = (counterDeleteAll) => {\n    const counter_id = 1;\n    const counters = [];\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n          totalItems={this.state.counters.reduce((currentTotal, item) => {\n            return item.value + currentTotal;\n          }, 0)}\n        />\n\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onAdd={this.handleAdd}\n            onDecrement={this.handleDecrement}\n            onDeleteAll={this.handleDeleteAll}\n            onSum={this.sumAllItems}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}